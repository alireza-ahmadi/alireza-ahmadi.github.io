<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on بلاگ علیرضا احمدی</title>
    <link>http://alireza.es/post/</link>
    <description>Recent content in Posts on بلاگ علیرضا احمدی</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Mar 2016 19:53:55 +0430</lastBuildDate>
    <atom:link href="http://alireza.es/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>اصول Logging در سیستم‌های نرم‌افزاری</title>
      <link>http://alireza.es/post/logging-best-practices/</link>
      <pubDate>Mon, 21 Mar 2016 19:53:55 +0430</pubDate>
      
      <guid>http://alireza.es/post/logging-best-practices/</guid>
      <description>

&lt;p&gt;تقریبا اکثر توسعه‌دهندگان بر روی این که Logging یکی از مهم‌ترین ابزارهای یک توسعه‌دهنده در پروژه‌های نرم‌افزاری است اتفاق نظر دارند ولی متاسفانه خیلی از توسعه‌دهندگان به خوبی از این ابزار ساده ولی قدرتمندی که در اختیار دارند استفاده نمی‌کنند. در حقیقت لاگ‌ها نحوه ارتباط توسعه‌دهنده با سرویسی هستند که طراحی می‌کنه پس یک استراتژی Logging مناسب می‌تونه توسعه نرم‌افزار شما رو سریع‌تر کنه، به پیدا کردن سریع‌تر باگ‌ها در لول پروداکشن کمک کنه و نگه‌داری محصول رو براتون ساده کنه. من سعی کردم برخی اصولی که خودم به طور معمول رعایت می‌کنم (و یا مهم هستند و من از روی تنبلی رعایت نمی‌کنم :)) رو در ادامه مطلب بیارم. اصول و تکنیک‌هایی که در ادامه نوشته شده‌اند به صورت کلی در پروژه‌های نرم‌افزاری در پلتفرم‌های مختلف قابل استفاده هستند ولی تمرکز اصلی مطلب بر روی پروژه‌های بک اند وب است.&lt;/p&gt;

&lt;h2 id=&#34;خودتون-رو-به-logger-های-پیش-فرض-پلتفرم-محدود-نکنید:16d36c2eb6a07573e32bfc924ce28b1e&#34;&gt;خودتون رو به Logger های پیش‌فرض پلتفرم محدود نکنید&lt;/h2&gt;

&lt;p&gt;تقریبا اکثر پلتفرم‌ها و زبان‌های برنامه‌نویسی یک کلاس، تابع، پکیج و یا ابزار مشابهی برای چاپ کردن  در اختیار توسعه‌دهندگان می‌گذارند، به چند تا مثال تو زبون‌های مختلف توجه کنید&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(&#39;Hello World!&#39;); // Javascript
print &#39;Hello World!&#39; # Python
fmt.Print(&#39;Hello World!&#39;) // Go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;با وجود این که استفاده از ابزارهای پیش‌فرض زبان می‌تونه تا حدی مشکل رو حل کنه ولی باعث میشه دست شما بسته بشه. پیشنهاد می‌کنم برای لاگ‌کردن رویدادها و دیباگینگ از یک لاگر سفارشی استفاده کنید، لاگرهای سفارشی به شما امکان لاگ کردن در درجات مختلف(خطاها، هشدارها، پیغام‌های مخصوص دیباگینگ و &amp;hellip;)، تعیین خروجی‌های مختلف(فایل، سرور لاگینگ، کنسول و &amp;hellip;)، تعیین فرمت خروجی(متن ساده، json و &amp;hellip;) و در مجموع کنترل کامل‌تر بر روی خروجی رو می‌دهند. من از &lt;code&gt;winston&lt;/code&gt; در نود، &lt;code&gt;logrus&lt;/code&gt; در گو و  پکیج استاندارد &lt;code&gt;logging&lt;/code&gt; در پایتون برای لاگ کردن استفاده می‌کنم.&lt;/p&gt;

&lt;h2 id=&#34;در-چند-درجه-مختلف-لاگ-کنید:16d36c2eb6a07573e32bfc924ce28b1e&#34;&gt;در چند درجه مختلف لاگ کنید&lt;/h2&gt;

&lt;p&gt;موارد زیادی در یک اپلیکیشن هستند که می‌توانند لاگ شوند با این وجود برخی از موارد صرفا در پروسه توسعه کاربرد دارند در حالی که برخی موارد هم در پروسه توسعه و هم در هنگامی که محصول در لول پروداکشن مشغول به کار است با اهمیت هستند(به طور مثال فقط خطاها و هشدارها)، در صورتی که از یک لاگر سفارشی استفاده کرده باشید می تونید به راحتی خروجی‌های سیستم را در چند درجه مختلف دسته‌بندی کنید و در در محیط‌های مختلف، فقط خروجی‌های مورد نیاز را تولید کنید، این استراتژی از افزایش بی‌دلیل حجم خروجی‌های شما به‌خصوص در لول پروداکشن کمک فوق‌العاده‌ای می‌کنه و دیباگینگ رو ساده‌تر خواهد کرد. در یک نرم‌افزار که به درستی طراحی شده باشه، درجه لاگ‌کردن در هنگام راه‌اندازی نرم‌افزار قابل تنظیمه(در داخل کد هارد کد نشده است) و حتی پس از راه‌اندازی نرم‌افزار نیز به صورت داینامیک قابل تغییر است تا در هنگام برخورد با مشکلات احتمالی در لول پروداکشن بتوان بدون از لحظه‌ای از دسترس خارج کردن سیستم، جزییات بیشتری از مشکل پیش اومده رو مشاهده کرد و راحت‌تر منشا اون رو پیدا کرد.&lt;/p&gt;

&lt;h2 id=&#34;در-لاگ-کردن-افراط-و-تفریط-نکنید:16d36c2eb6a07573e32bfc924ce28b1e&#34;&gt;در لاگ‌کردن افراط و تفریط نکنید&lt;/h2&gt;

&lt;p&gt;مثل تمام بخش‌های دیگه زندگی، افراط و تفریط در لاگ کردن هم می‌تونه باعث ایجاد مشکل در کارها بشه. سعی کنید اکثر رویدادهای مهم سیستم که موفقیت‌آمیز بودن یا نبودنشون می‌تونه باعث ایجاد تغییر در رویه کاری سیستم بشه رو لاگ کنید. برقرار شدن ارتباط با دیتابیس، راه‌اندازی موفق سرور، موفقیت‌آمیز بودن کوئری‌های ارسالی برای دیتابیس و امثالهم از مواردی هستند که می‌بایست لاگ شوند با این وجود مشخصا اختصاص دادن مقدار یه یک متغیر نیازی به لاگ کردن ندارد، قبل از لاگ‌کردن یک مورد برای چند مسئله به این فکر کنید که آیا واقعا می‌شود درآینده از دیتای خروجی این مورد استفاده شود و یا دیتای خروجی صرفا موجب شلوغ شدن خروجی لاگ‌ها می‌شود؟&lt;/p&gt;

&lt;p&gt;بدیهی است که لاگ‌کردن در درجات مختلف می‌تونه تا حد قابل‌قبولی به این مورد هم کمک کنه.&lt;/p&gt;

&lt;h2 id=&#34;اطلاعاتی-که-مورد-نیاز-است-رو-لاگ-کنید-نه-کمتر-و-نه-بیشتر:16d36c2eb6a07573e32bfc924ce28b1e&#34;&gt;اطلاعاتی که مورد نیاز است رو لاگ کنید، نه کمتر و نه بیشتر&lt;/h2&gt;

&lt;p&gt;لاگ‌ها باید علاوه بر ذکرکردن وقوع یک رویداد، اطلاعات مربوط به اون رویداد رو همراه خود داشته باشند. پیام‌های زیر رو مقایسه کنید:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1] order
[2] Order creation failed
[3] Order creation failed. price=۲۱۴۰۰ userId=oQYZQxCAKN8J
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;درباره حالت ۱ که توضیحی ندارم و به نظرم کاملا مردوده :)‌ ولی در مورد حالات دیگه در صورتی که اطلاعات مربوط به رویداد رو ذکر نکرده باشید(حالت ۲)، احتمالا هیچ وقت نخواهید فهمید که عدم موفقیت‌آمیز بودن ایجاد سفارش مربوط به فارسی بودن اعداد قیمت سفارش است ولی در حالت ۳ به راحتی علت بروز مشکل قابل پیگیری است. سعی کنید ماکسیمم اطلاعاتی که به دیباگینگ کمک می‌کنند رو ذکر کنید، &lt;strong&gt;آیدی‌ها&lt;/strong&gt; و &lt;strong&gt;داده‌هایی که نیاز به اعتبارسنجی دارند&lt;/strong&gt; در بالاترین درجه اهمیت هستند. هم‌چنین داده‌های بیش از حد و از لاگ کردن مواردی که ذکر شدن یا نشدنشون تغییری در پورسه ایجاد نمی‌کنه پرهیز کنید به طور مثال لازم نیست تا رویدادی تکراری که در یک حلقه انجام می‌شود را به ازای هر بار انجام لاگ کنید، کافیست عملیات انجام شده به همراه تعداد دفعات انجام حلقه را لاگ کنید. در نهایت از لاگ کردن دیتاهای امنیتی مثل پسوردها، توکن‌ها و امثالهم هم اکیدا بپرهیزید.&lt;/p&gt;

&lt;h2 id=&#34;لاگ-ها-باید-توسط-انسان-و-ماشین-قابل-خواندن-باشند:16d36c2eb6a07573e32bfc924ce28b1e&#34;&gt;لاگ‌ها باید توسط انسان و ماشین قابل خواندن باشند&lt;/h2&gt;

&lt;p&gt;لاگ‌های خروجی سیستم می‌بایست بدون parse کردن برای انسان‌ها قابل خواندن باشند در غیر این صورت مهم‌ترین قابلیت خود رو از دست می‌دهند، علاوه بر این باید توسط ماشین هم قابل خواندن باشند تا بتوان اون‌ها رو ساده تر تحلیل کرد پس سعی کنید پیام‌هاتون ساده باشه، یک رویداد در چند خط متفاوت لاگ نشه، ترجیحا هیچ‌گونه سریالیزیشنی حتی تبدیل به json ساده بر روشون انجام نشه(البته این مورد در شرایط خاص قابل چشم‌پوشی است) و مهم‌تر از همه متن ساده باشند و به هیچ عنوان به یک فرمت باینری تبدیل نشوند تا انسان بتواند به راحتی آن‌ها رو بخواند. در عین حال برای این که ماشین هم توانایی خواندن سریع داده‌ها رو داشته باشه باید تمام پیام‌های تولیدی توسط یک سیستم از یک فرمت مشخص و البته قابل parse کردن پیروی کنند. پیشنهاد می‌کنم پیام‌هاتون شامل درجه لاگ، زمان تولید، یک متن پیام نوشته شده توسط خودتون(یک جمله واقعی و واضح، نه صرفا یک کلمه کلیدی) به همراه تعدادی جفت key/value  شامل دیتاهای مربوط به رویداد باشه با چنین ساختاری:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;time=&amp;quot;2015-12-01T01:27:38+3:30&amp;quot; level=debug msg=&amp;quot;Something useful&amp;quot; key1=value1 foo=bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 
و یا&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[debug][2015-12-01T01:27:38+3:30][Something useful][(key1:value1)(foo:bar)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;در مواردی که سیستم و یا لایبرری مورد استفاده‌تون پیغام خطایی تولید کرده، اون رو به عنوان یکی از جفت key/value ها چاپ کنید. چنین ساختاری علاوه بر این که خوانایی مناسبی برای انسان داره می‌تونه به راحتی توسط ماشین parse بشه و در عین حال میشه به راحتی بر روی داده‌ها کوئری زد. لطفا به این توجه کنید که زمان لاگ‌شدن اهمیت بالایی و کاربردهای مختلفی داره و به هیچ عنوان نباید در هنگام لاگ کردن فراموش بشه، هم‌چنین بهتره زمان در پیام‌ها با فرمتی لاگ بشه که تاریخ و ساعت رو به همراه منطقه زمانی به طور کامل داشته باشه و استفاده از تاریخ و یا ساعت و یا عدم چاپ کردن منطقه زمانی به هیچ‌عنوان توصیه نمیشه. (استفاده از Unix Timestamp هم به دلیل ناخوانایی برای انسان توصیه نمیشه)&lt;/p&gt;

&lt;p&gt;##خروجی لاگ‌ها رو به مقصد مناسب هدایت کنید&lt;/p&gt;

&lt;p&gt;لاگ‌کردن داده‌ها می تونه مقصدهای مختلفی داشته باشه، شما می‌تونید توی کنسول سیستم لاگ کنید، از یک فایل استفاده کنید، داده‌هاتون رو به یک سرویس ‌HTTP بفرستید، توی دیتابیس ذخیره کنید و یا از خیلی از روش‌های دیگه استفاده کنید. هر کدوم از مقصدهایی که ذکر شد مزایا و معایب مختص خودشون رو دارند و استفاده از هرکدوم از روش‌ها می‌تونه با در نظر گرفتن شرایط پروژه توجیه‌پذیر باشه.&lt;/p&gt;

&lt;p&gt;پیشنهاد من اینه که تا سر حد امکان روی کنسول سیستم لاگ نکنید. از مقصدهای HTTP بپرهیزید(به خصوص اگه شرایط شبکه‌تون حتی در لول پروداکشن استیبل نیست، مثلا توی یک دیتاسنتر ایرانی مستقر هستید) و لاگ‌کردن توی دیتابیس رو هم فراموش کنید چون با وجود این که به شما امکانات خوبی برای تحلیل داده‌ها میده ولی باعث ایجاد تاخیر در عملکرد نرم‌افزار میشه(به خصوص در پلتفرم‌هایی که از کانکارنسی به طور مناسب پشتیبانی نمی‌کنند). سعی کنید پیام‌ها رو روی فایل لاگ کنید، فایل‌ها برخلاف مقصدهای تحت شبکه بلاک نمی‌شوند، نوشتن بر روی آن‌ها فوق‌العاده کم‌هزینه و سریعه و کمترین تاثیر رو بر روی عملکرد سیستم دارند. علاوه بر این برای تحلیل اون‌ها هم گزینه‌های مختلفی در اختیار دارید، می‌تونید از یک ادیتور ساده متنی استفاده کنید، از &lt;code&gt;grep&lt;/code&gt; برای سرچ کردن توشون استفاده کنید و یا با راه‌اندازی یک نود Logstash، خروجی‌ها رو از منابع مختلف جمع‌آوری کنید و به راحتی و با حداقل تاثیر بر روی پرفورمنس سیستم روشون کوئری‌های پیچیده بزنید.&lt;/p&gt;

&lt;h2 id=&#34;لاگ-ها-تنها-روش-گرفتن-خروجی-از-سیستم-شما-نیستند:16d36c2eb6a07573e32bfc924ce28b1e&#34;&gt;لاگ‌ها تنها روش گرفتن خروجی از سیستم شما نیستند&lt;/h2&gt;

&lt;p&gt;در نظر داشته باشید که لاگ‌ها با وجود این که کمک شایانی به شما در پروسعه توسعه می‌کنند تنها ابزار شما نیستند و باید برخی اوقات منابع دیگه‌ای برای تحیل سرویس‌تونه داشته باشید. مثلا سعی کنید ارورها سیستم و اکسپشن‌های ایجاد شده در سیستم رو بر روی یک سرویس بیرونی که شما رو از به وجود اومدن اون‌ها مطلع می‌کنه هدایت کنید، &lt;a href=&#34;https://getsentry.com&#34;&gt;Sentry&lt;/a&gt; برای وب‌سرویس‌ها و &lt;a href=&#34;https://fabric.io/kits/crashlytics&#34;&gt;Crashlytics&lt;/a&gt; بر موبایل‌اپ‌ها گزینه‌های پیشنهادی من برای ارور هندلینگ هستند، اکثر لاگرهای سفارشی را می‌توان طوری تنظیم کرد که لاگ‌های مربوط به یک درجه خاص(مثل خطاها) را علاوه بر لاگ‌کردن در فایل به مقصد‌های دیگه هم ارسال کنند. هم‌چنین به طور مثال می‌توان برخی داده‌های عددی که تحلیل‌شون ساده‌تره رو مثل تعداد ریکوئست‌ها، تعداد ریکوئست‌های ناموفق، زمان مورد نیاز برای انجام کوئری‌ها و &amp;hellip;  به سرویس‌های جمع‌اوری متریکز مثل Graphite ارسال کرد و تحلیل اون‌ها رو چندین مرتبه ساده‌تر کرد. پس فکر نکنید لاگ‌کردن تنها راه ارتباط شما با سرویسی هستش که طراحی کردید.&lt;/p&gt;

&lt;h2 id=&#34;یک-استراتژی-مناسب-برای-آرشیو-کردن-لاگ-هاتون-داشته-باشید:16d36c2eb6a07573e32bfc924ce28b1e&#34;&gt;یک استراتژی مناسب برای آرشیو کردن لاگ‌هاتون داشته باشید&lt;/h2&gt;

&lt;p&gt;به هر میزانی که حرفه‌ای عمل کنید و فقط موارد مورد نیازتون رو لاگ کنید، با توسعه سیستم و گذر زمان به مرحله‌ای می‌رسید که حجم فایل‌های لاگ‌هاتون به طرز قابل توجهی رشد می‌کنه و حجم زیادی از فایل مربوط خواهد بود به دیتاهایی که مدت‌ها پیش تولید شدند و شما نیازی به استفاده ازشون ندارید. راه‌حل ساده در برخورد با این مشکل پاک‌کردن لاگ‌هاست :) شاید بعد یک سال از تولید یک پیام، دیگه نیازی به اون پیام نباشه ولی پاک کردن لاگ سیستم مربوط به یک ماه پیش یک اشتباه واقعیه، در نتیجه سعی کنید یک راهکار مناسب برای آرشیو کردن لاگ‌هاتون داشته باشید، مثلا پیشنهاد می‌کنم تا  در بازه‌های زمانی مشخص لاگ‌هاتون فشرده‌سازی کنید و فایل‌های اصلی رو حذف کنید.(سرویس‌هایی هستند که این مراحل رو به طور خودکار براتون انجام میدن، هم‌چنین اگه فرمت لاگ‌تون منطقی طراحی شده باشه و زمان هم درش در نظر گرفته شده باشه، خودتون هم می‌تونید به راحتی یه ابزار ساده برای انجام این عملیات بنویسید) فقط توجه داشته باشید که بازه زمانی مربوط به این عملیات باید به نحوی انتخاب بشه که عملا لاگ‌های شما رو غیر قابل استفاده نکنه.&lt;/p&gt;

&lt;p&gt;امیدوارم مواردی که توضیح دادم به پروسه توسعه نرم‌افزارهاتون کمک کنه.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>روش پیشنهادی من برای یادگیری برنامه‌نویسی اندروید</title>
      <link>http://alireza.es/post/learn-android-programming/</link>
      <pubDate>Mon, 01 Sep 2014 14:32:00 +0430</pubDate>
      
      <guid>http://alireza.es/post/learn-android-programming/</guid>
      <description>&lt;p&gt;جدی‌ترین معضل من در اوایل ورود به حوزه برنامه‌نویسی و طراحی‌ نرم‌افزار پیدا کردن منابع مناسب برای یادگیری یک تکنولوژی یا زبان جدید بود به طوری که برای یادگیری هر چیزی، ساعت‌های زیادی رو صرف جستجو در اینترنت می‌کردم تا بتونم منبع مناسبی رو برای یادگیری اون تکنولوژی پیدا کنم. این روش به من کمک می‌کرد که تا علاوه بر یادگیری اون مبحث خاص بتونم بر خیلی از موارد مرتبط هم اشراف کلی پیدا کنم و در آینده اون ها رو به کار بگیرم اما این روش یادگیری مشکلات خاص خودش رو هم داره. در واقع من برای یادگیری سطحی مجموعه‌ای از مباحث که شاید ارتباط چندانی هم با مبحث مورد نظرم شما نداشتن و بعضا هیچ‌وقت به کارم نیامدند، سه تا چهار برابر زمان لازم برای یادگیری مبحث اصلی رو اختصاص می‌دادم.&lt;/p&gt;

&lt;p&gt;شاید این روش برای من که اون زمان دانش‌آموز بودم و مهم‌ترین مشغولیت ذهنیم خوندن درس‌های مدرسه بود مفید بوده باشه اما برای فردی که دانشجو شده یا بعد از فارغ‌التحصیل شدن از دانشگاه قصد داره با یادگیری یک تکنولوژی خاص موقعیت شغلی مناسبی رو برای خودش فراهم کنه قطعا مثل سم می‌مونه، چون فشار حاصل از کند شدن پروسه یادگیری می‌تونه اون فرد رو به طور کامل از یادگیری اون مبحث منصرف کنه. پس بهتره برای یادگیری هر چیزی بهترین منابع رو انتخاب کنید. در حقیقت همون‌طوری که &lt;a href=&#34;http://blog.alireza.es/5/my-web-development-environment/&#34;&gt;ابزارهای مناسب&lt;/a&gt; به شما کمک می‌کنه که کارتون رو با سرعت و کیفیت بهتری انجام بدید، استفاده از منابع و روش مناسب هم می‌تونه زمان یادگیری شما رو به حداقل برسونه.&lt;/p&gt;

&lt;p&gt;چند روز پیش که مشغول &lt;a href=&#34;https://twitter.com/alireza94&#34;&gt;توییت کردن&lt;/a&gt; در مورد مباحث کاریم بودم، یکی از دوستان دایرکت داد و درخواست کرد که بهش منابعی رو برای یادگیری برنامه‌نویسی اندروید معرفی کنم. منم تصمیم گرفتم منابعی رو که طی چند ماه گذشته به کارآموزهای &lt;a href=&#34;http://www.gandom.co&#34;&gt;گندم&lt;/a&gt; معرفی کرده بودم رو به صورت یک پست بنویسم و به صورت عمومی منتشر کنم. امیدوارم در صورتی که قصد شروع برنامه‌نویسی اندروید رو دارید این مطلب بهتون کمک بکنه.&lt;/p&gt;

&lt;p&gt;از نظر من روشی که در ادامه توضیح میدم یکی از عملی‌ترین و در عین حال ساده‌ترین راهکاری یادگیری برنامه‌نویسی اندروید هستش.&lt;/p&gt;

&lt;p&gt;برای شروع برنامه‌نویسی اندروید شما باید با ساختار و تکنیک‌های اولیه برنامه‌نویسی جاوا آشنا باشید. در صورتی که با جاوا آشنایی ندارید، می‌تونید سری مطالب فوق‌العاده &lt;a href=&#34;http://code.tutsplus.com/series/learn-java-for-android-development--mobile-22888&#34;&gt;یادگیری جاوا برای توسعه اندروید&lt;/a&gt; رو مطالعه کنید. تو این مجموعه مطالب که حدود 13 قسمت میشه با فرض آشنایی کلی شما با اصول برنامه‌نویسی سعی شده تا از مباحث اولیه جاوا تا مباحث نسبتا پیشرفته معرفی بشه. جدا پیشنهاد می‌کنم که اگه برنامه‌نویسی جاوا رو به صورت حرفه‌ای بلد نیستید در خوندن این مطالب تعلل نکنید.
بعد از یادگیری اولیه جاوا، باید سراغ مطلب &lt;a href=&#34;http://raghavendra-androidapps.blogspot.com/2011/07/basic-concepts-of-android.html&#34;&gt;مفاهیم پایه‌ای اندروید&lt;/a&gt; برید. این مطلب توی چند پارگراف به شما اصطلاحات کلی اندروید رو معرفی می‌کنه. اگه حوصله‌اش رو دارید، &lt;a href=&#34;http://developer.android.com/guide/components/fundamentals.html&#34;&gt;مستندات اندروید&lt;/a&gt; هم توضیحات خیلی کاملی برای معرفی مفاهیم واصطلاحات اندروید داده.&lt;/p&gt;

&lt;p&gt;خب تا اینجا صرفا مجموعه‌ای از مطالب تئوری رو خوندید، حالا وقت اینه که یه مقدار وارد فاز عملیاتی بشید، پس برید به این &lt;a href=&#34;http://androidcode.ir/post/install-package-android-SDK-platform&#34;&gt;آموزشی فارسی&lt;/a&gt; و یا این &lt;a href=&#34;http://www.androidcentral.com/installing-android-sdk-windows-mac-and-linux-tutorial&#34;&gt;آموزش انگلیسی&lt;/a&gt; و اندروید SDK رو نصب کنید. اندروید SDK در واقع مجموعه ابزارهای گوگل برای توسعه نرم‌افزاری های اندرویدی است که شامل منابع آموزشی، مستندات، کتابخانه‌های نرم‌افزاری، ابزارهای عیب‌یابی و انتشار نرم‌افزار میشه. علاوه بر این موارد اندروید SDK به شما یک ماشین مجازی برای اجرا کدهای اندرویدتون میده که به علل مختلف پیشنهاد می‌کنم ازش استفاده نکنید و در ادامه بهتون راهکارهای جایگزینش رو معرفی خواهم کرد(تا قبل از رسیدن به اون بخش می‌تونید اپ‌های نمونه‌ای که می‌نویسید رو توی گوشیتون اجرا کنید). در واقع اندروید SDK پیش‌نیاز شما برای برنامه‌نویسی و تولید نرم‌افزارهای اندرویدیه.&lt;/p&gt;

&lt;p&gt;حالا پیش‌نیازهای شروع برنامه‌نویسی اندروید رو در اختیار دارید پس باید شروع کنید به یادگیری عملی اندروید. پیشنهاد من برای این مرحله دیدن &lt;a href=&#34;http://www.lynda.com/Android-tutorials/Android-SDK-Essential-Training/143102-2.html&#34;&gt;ویدئوهای آموزشی لیندا&lt;/a&gt; است که می‌تونید اون ها رو از سایت تولید کننده بخرید و یا اگه نمی‌تونید و یا نمی‌خواین که بخرید با یه جستجوی ساده توی وب‌سایت‌های فارسی پیدا و دانلودش کنید. این سری ویدئو از مفاهیم اولیه برنامه‌نویسی اندروید مثل نصب اندروید SDK شروع می‌کنه و به تدریج حجم زیادی از تکنیک‌های کلیدی مثل ایجاد کردن چند صفحه در اپ، کار کردن با دیتا،پیاده‌سازی المان‌های رابط کاربری و &amp;hellip; رو آموزش میده. اکیدا توصیه می‌کنم که به دیدن ویدئوها اکتفا نکنید و سعی‌ کنید تمام کدهای زده شده توی ویدئوها رو یکبار خودتون بزنید.&lt;/p&gt;

&lt;p&gt;بعد از این دیدن این سری ویدئوها شما می‌تونید یک اپ ساده شبیه اکثر اپ‌های موجود در بازار اندروید رو تولید کنید. پیشنهاد می‌کنم در این مرحله و قبل از ورود به مرحله بعدی اپی بنویسید که توش از تمام مواردی که یاد گرفتید و یا حداقل خوندید ولی یاد نگرفتید استفاده کنید(شاید نوشتن یک ماشین حساب ساده ایده خوبی باشه) تا به طور کامل به اون مباحث مسلط بشید(و البته پیشنهاد می‌کنم که توی بازار منتشرش نکنید :)).&lt;/p&gt;

&lt;p&gt;در صورتی که مواردی که تا اینجا ذکر شده رو انجام داده باشید آمادگی این رو دارید که  تکنیک‌های مربوط به برنامه‌نویسی نیمه‌ پیشرفته اندروید رو یاد بگیرید. در مرحله اول این بخش پیشنهاد می‌کنم که ماشین مجازی GenyMotion رو نصب کنید. ماشین‌ مجازی پیش‌فرض اندروید هنوز و حتی بعد بهبود از قابل توجه سرعت نسبت به نسخه‌های قدیمی، سرعت پایینی داره، به طوری که اکثر برنامه‌نویس‌ها ترجیح میدن تا از دیوایس‌هاشون برای تست نرم‌افزارها استفاده کنن(البته تست کردن روی دیوایس مزایای خاص خودش رو داره). اما از طرفی به علت کثرت دیوایس‌های اندرویدی شما نمی‌تونید به یک یا دو دیوایسی که در خونه یا محل کار دارید اکتفا کنید و مجبورید برای تست دیوایس‌های مختلف و ورژن‌های مختلف اندروید از سیستم‌های شبیه‌ساز و ماشین‌های مجازی استفاده کنید. جنی‌موشن با سرعت فوق‌العاده بالایی که داره بهتون کمک می‌کنه که کارایی شبیه‌ساز اندروید(AVD) رو در کنار سرعت بالا داشته باشید.&lt;/p&gt;

&lt;p&gt;در مرحله دوم سعی کنید روی یکی از کاربردی‌ترین مباحث موجود در ویدئوها تمرکز کنید، یعنی SQLite. این پایگاه داده به علت سبک بودن در حجم زیادی از سیستم‌های‌عامل و نرم‌افزارها مورد استفاده قرار می‌گیره و با توجه به اهمیت کارکردن با دیتاها، بهتره شما به طور کامل به اون مسلط باشید. مطلب &lt;a href=&#34;http://www.askyb.com/sqlite/learn-sqlite-in-1-hour/&#34;&gt;آموزش Sqlite در یک ساعت&lt;/a&gt; خیلی می‌تونه بهتون کمک کنه و اگه حوصله داشته باشید این &lt;a href=&#34;http://sql.learncodethehardway.org/book/&#34;&gt;کتاب مجانی&lt;/a&gt; هم خیلی بهتون کمک خواهد کرد.&lt;/p&gt;

&lt;p&gt;توی مرحله سوم سعی کنید بر روی مدیریت ارورها کار کنید، اکثر کاربرا نرم‌افزاری که توی اولین اجرا فورس کلوز بشه رو دوباره نصب نمی‌کنن پس باید اپتون تو تمام شرایط به کار خودش ادامه بده. این &lt;a href=&#34;http://trivedihardik.wordpress.com/2011/08/20/how-to-avoid-force-close-error-in-android/&#34;&gt;مطلب&lt;/a&gt; می‌تونه به شما توی این بخش کمک کنه، همچنین در صورتی که سرویس گوگل آنالایتیکز رو بر روی اپتون راه‌ندازی کنید می‌تونید به اطلاعات مناسبی از نحوه تعامل کاربرها با اپتون، زمان و نحوه کرش‌کردن‌های اپ و خیلی از اطلاعات جالب دیگه دست پیدا کنید و ارورهای احتمالی رو در کوتاه‌ترین زمان رفع کنید. &lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/android/v4/&#34;&gt;راهنمای گوگل&lt;/a&gt; بهترین راهنما برای اضافه کردن گوگل آنلایتیکز به اپتون هستش.&lt;/p&gt;

&lt;p&gt;مرحله چهارم شروع کار با سرویس‌های پس‌زمینه(Background services) است. بک‌گراند سرویسز یکی از پر کاربرد ترین موارد در سیستم‌های نسبتا پیشرفته هستن، پس خوندن &lt;a href=&#34;http://danielnadeau.blogspot.com/2013/10/android-services-tutorial-run-tasks-in.html&#34;&gt;این مطلب&lt;/a&gt; و &lt;a href=&#34;http://cogitolearning.co.uk/?p=780&#34;&gt;این مقایسه&lt;/a&gt; رو از دست ندید.
در محله پایانی که از نظر من مهم‌ترین مرحله است، شما باید سعی کنید تا از طریق اپتون با سرویس‌های تحت وب ارتباط برقرار کنید. پیش‌نیاز این مسئله شناخت پروتکل‌های ارتباطی وب‌ هستش پس مطلب شماره &lt;a href=&#34;http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177&#34;&gt;یک&lt;/a&gt; و &lt;a href=&#34;http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-2--net-31155&#34;&gt;دو&lt;/a&gt; رو از سری مطالب آموزش پروتکل HTTP بخونید. حالا که با استانداردها و قواعد آشنا شدید می‌تونید برید سراغ استفاده از کتابخانه‌ها و امکاناات اندروید برای ارتباط با وب. در مطلب &lt;a href=&#34;http://www.raywenderlich.com/56107/make-first-android-app-part-1&#34;&gt;آموزش پیاده‌سازی برنامه آب و هوا&lt;/a&gt; سعی شده تا یک برنامه ساده که با وب ارتباط برقرار می‌کنه طراحی بشه. در &lt;a href=&#34;http://hmkcode.com/android-parsing-json-data/&#34;&gt;این مطلب&lt;/a&gt;  هم سعی شده تا کار با وب‌سرویس‌هایی که جواب رو به صورت JSON برمی‌گردونن آموزش داده بشه. بعد از این مرحله می‌تونید پا رو یک قدم جلوتر بذارید و برید سراغ این که وب‌سرویس رو هم خودتون طراحی کنید. &lt;a href=&#34;http://www.androidhive.info/2014/01/how-to-create-rest-api-for-android-app-using-php-slim-and-mysql-day-23/&#34;&gt;این مطلب&lt;/a&gt; یک نمونه خوب از این پروسه است(البته پیشنهاد من اینه که طراحی وب‌سرویس رو به افرادی که در حوزه وب تخصص دارن واگذار کنید). مرحله بعدی می‌تونه دیدن این &lt;a href=&#34;https://developers.google.com/events/io/2012/sessions/gooio2012/121/&#34;&gt;ویدئو گوگل IO&lt;/a&gt; باشه که خیلی از موارد ارتباط با وب سرویس ها رو پوشش داده. در نهایت می‌تونید بر روی سینک کردن اطلاعات وب‌سرور و اپتون کار کنید، &lt;a href=&#34;http://chariotsolutions.com/blog/post/android-data-sync/&#34;&gt;این مطلب&lt;/a&gt; و &lt;a href=&#34;http://udinic.wordpress.com/2013/07/24/write-your-own-android-sync-adapter/&#34;&gt;این مطلب&lt;/a&gt; نمونه‌های خوبی از این مورد هستند.&lt;/p&gt;

&lt;p&gt;در این مطلب من سعی کردم کلیات مواردی که بیشترین کاربرد در اندروید رو دارن معرفی کنم، یقینا در صورتی که به صورت جدی وارد حوزه برنامه اندروید شوید به حجم اطلاعاتی خیلی بیشتری از موارد بالا نیاز پیدا خواهید کرد با این وجود امیدوارم تونسته باشم به شما کمکی بکنم و به عنوان آخرین پیشنهاد، برای این که یاد بگیرید، سعی کنید پیچیده‌ترین پروژه‌هایی که به ذهنتون می‌رسه رو انجام بدید و در پروسه انجام پروژه تکنیک‌های حرفه‌ای رو راه بگیرید که بهترین روش برای یادگیریه.
در نهایت اگه حال و حوصله خوندن این موارد رو ندارید و به قول معروف دیر اومدید و زود هم می‌خواین برین می‌تونید شماره &lt;a href=&#34;http://imohamad.me/blog/1393/06/05/building-a-simple-application-for-android-part1/&#34;&gt;یک&lt;/a&gt; و &lt;a href=&#34;http://imohamad.me/blog/1393/06/08/building-a-simple-application-for-android-part2/&#34;&gt;دو&lt;/a&gt; آموزش ساده و کاربردیه برنامه‌نویسی اندرویدی که محمدرضا دیلمی نوشته رو بخونید، به مراتب نگارش بهتری از من داره.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ابزارهایی که من برای توسعه وب استفاده می کنم</title>
      <link>http://alireza.es/post/webdevelopment-toolchain/</link>
      <pubDate>Tue, 08 Jul 2014 15:17:00 +0430</pubDate>
      
      <guid>http://alireza.es/post/webdevelopment-toolchain/</guid>
      <description>

&lt;p&gt;فرض کنید قصد دارید در یه بطری نوشابه رو باز کنید(منظورم بطری‌های شیشه‌ای با در فلزی هستش). برای باز کردنش قطعا راه‌حل‌های مختلفی دارید، می‌تونید با با قاشق درش رو باز کنید، می‌تونید برای باز کردنش برید سراغ &lt;a href=&#34;http://baghbagho.com/open-coke-with-car-door/&#34;&gt;در ماشین&lt;/a&gt;  یا حتی مثل مغازه ساندویچی توی اختیاریه، با لبه‌ی یخچالتون بازش کنید. هر کدام از روش‌های ذکر شده شما رو به نتیجه مورد نظرتون خواهند رسوند ولی فکر می‌کنم اکثریت افراد اتفاق نظر دارند که منطقی ترین روش استفاده از دربازکن هستش.
برای توسعه وب هم می‌تونید از ابزارهای مختلفی استفاده کنید، مثلا ساده ترین راه اینه که نرم‌افزار نوت‌پد رو توی ویندوز باز کنید و شروع کنید توش کد بزنید، به طور قطع شما می‌تونید با همون نوت‌پد یه سایت کامل رو ایجاد کنید، اما انرژی تلف شده شما برای انجام این کار به حدی زیاد خواهد بود که بعد از تموم شدن اون سایت، کلا با بحث طراحی و توسعه‌وب خداحافظی می‌کنید. در واقع برای انجام هر کاری، استفاده از ابزار مناسب می‌تونه کار شما رو راحت‌تر کنه و انتخاب اشتباه ابزارها هم می‌تونه باعث نابودی انرژی و وقت شما بشه. من طی چند سال اخیر که مشغول توسعه‌وب بودم، ابزارهای مختلفی رو استفاده کردم در نهایت بعد از یک مدت زمان طولانی آزمون و خطا، تقریبا یکی دو سالی میشه که از مجموعه ثابتی از ابزارها استفاده می‌کنم که در ادامه لیست اون‌ها رو خواهید دید. لازم به ذکر است که من این ابزارها رو بر روی ویندوز استفاده می‌کنم ولی اکثر اون‌ها حداقل در مک‌ قابل استفاده هستند.&lt;/p&gt;

&lt;h1 id=&#34;مرورگر:3be659d0e4a0870962ec913cfc3cb2ee&#34;&gt;مرورگر&lt;/h1&gt;

&lt;p&gt;لازم به ذکر نیست که زمانی که مشغول ایجاد کردن وب‌سایتی هستید، لازمه که حاصل کار خودتون رو توی مرورگرهای مختلفی تست کنید، برای همین من به طور معمول اینترنت‌اکسپلورر، فایرفاکس، اپرا، سافاری(که متاسفانه ساپورت ویندوزش قطع شده) و کروم‌قناری(برای تست کردم قابلیت‌های آینده کروم) رو روی دستگاهم دارم اما مرورگر اصلی که به طور روزانه ازش استفاده می‌کنم و تقریبا با روشن شدن کامپیوتر باز میشه و قبل از خاموش شدنش بسته میشه، نسخه استیبل کروم هست. کروم علاوه بر سرعت بالای اجرای کدها و پشتیبانی از رنج وسیعی از استانداردهای وب، مجموعه بی‌نظیری از اکستنشن(افزونه؟)ها رو داره و علاوه بر این‌ها، دولوپر تولز فوق‌العاده‌ای داره که من به کار کردن باهاش عادت کردم.
علاوه بر این من روی موبایل هم از کروم استفاده می‌کنم و دولوپر تولز کروم + ADB سیستم فوق‌العاده‌ای رو برای تست وب‌سابت روی موبایل فراهم می‌کنه، سعی می‌کنم در آینده در مورد &lt;a href=&#34;https://developer.chrome.com/devtools/docs/remote-debugging&#34;&gt;ریموت دیباگینگ&lt;/a&gt; یه مطلب بنویسم، بحث مفصلی هستش و اینجا جای توضیح دادنش نیست.&lt;/p&gt;

&lt;h2 id=&#34;اپ-های-کروم:3be659d0e4a0870962ec913cfc3cb2ee&#34;&gt;اپ‌های کروم&lt;/h2&gt;

&lt;p&gt;اپ‌های کروم به خصوص بعد از &lt;a href=&#34;http://lifehacker.com/new-chrome-apps-run-on-your-desktop-offline-and-outsid-1258080268&#34;&gt;مستقل&lt;/a&gt; شدنون خیلی کاربردی شدند، من مجموعه زیادی از اپ‌های کروم رو استفاده می‌کنم ولی مواردی که برای توسعه‌وب کاربرد دارند محدود هستند به این موارد:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman-rest-client-packa/fhbjgbiflinjbdggehcddcbncdddomop&#34;&gt;Postman&lt;/a&gt; : شاید بهترین ابزار برای تست رست‌سرویس‌ها باشه، پست‌من تونسته برای من به طور کامل جای curl رو بگیره و تبدیل به ابزاری شده که من به طور روزانه ازش استفاده می‌کنم.
&lt;a href=&#34;https://chrome.google.com/webstore/detail/pnhechapfaindjhompbnflcldabbghjo&#34;&gt;Secure Shell&lt;/a&gt; : در پروسه توسعه‌وب، یکی از واجبات ارتباطات ssh هستش که توی سیستم‌های مبتنی بر یونیکس، میتونید به طور مستقیم از طریق کامندلاین انجام بدید اما روی ویندوز همه چیز به این سادگی پیش نمی‌ره. تا نزدیک به 1 سال پیش من از putty استفاده می‌کردم اما الان این اپ جایگزین پوتی برای من شده و مهم ترین نکته‌اش اینه که به عنوان یه تب توی مرورگر اجرا میشه
&lt;a href=&#34;https://chrome.google.com/webstore/detail/gefgglgjdlddcpcapigheknbacbmmggp&#34;&gt;Chroma&lt;/a&gt; : اپی که می‌تونه واقعا توی مرحله انتخاب رنگ بهتون کمک کنه، اینترفیس خیلی ساده‌ای داره و بهتون کد رنگ رو با فرمت‌های مختلفی میده، در واقع این اپ مدت‌هاست جایگزین اپ پولی Color Schemer Studio برای من شده و مقداری از عذاب وجدان من رو به خاطر استفاده از کرک‌ها کم کرده.&lt;/p&gt;

&lt;h1 id=&#34;ابزارهای-کامندلاین:3be659d0e4a0870962ec913cfc3cb2ee&#34;&gt;ابزارهای کامندلاین&lt;/h1&gt;

&lt;p&gt;من همیشه عاشق کامندلاین بودم و پیشنهاد می‌کنم شما هم عاشقش باشید. کامندلاین روی سیستم‌های مختلف  امکانات مختلفی رو در اختیارتون میذاره، ولی مواردی که مشترکه و من واقعا ازشون استفاده می‌کنم رو لیست می‌کنم، من به طور عمده از &lt;a href=&#34;http://git-scm.com/&#34;&gt;گیت&lt;/a&gt; برای مدیریت و بک‌آپ گرفتن از کدها، &lt;a href=&#34;http://npmjs.org&#34;&gt;NPM&lt;/a&gt; و یک سری از ماژول‌های کاربردیش، مثل &lt;a href=&#34;http://npmjs.org/package/node-static&#34;&gt;Static&lt;/a&gt; برای ایجاد یه فایل سرور ساده، &lt;a href=&#34;https://www.npmjs.org/package/grunt&#34;&gt;Grunt&lt;/a&gt; و &lt;a href=&#34;https://www.npmjs.org/package/gulp&#34;&gt;Gulp&lt;/a&gt; برای اتوماتیک کردن یه سری تسک‌های تکراری استفاده می‌کنم.&lt;/p&gt;

&lt;h1 id=&#34;ادیتورها:3be659d0e4a0870962ec913cfc3cb2ee&#34;&gt;ادیتورها&lt;/h1&gt;

&lt;p&gt;بخش زیادی از کار یک توسعه‌دهنده وب به کد زدن می‌گذره در نتیجه شاید این بخش مهم‌ترین بخش مطلب باشه، من بعد از مدت زمان طولانی تست کردن ادیتورهای ساده و IDE های پیشرفته، به این نتیجه رسیدم که برای ادیت‌های کوچک و خواندن کد از ادیتورهای خیلی ساده استفاده کنم، &lt;a href=&#34;http://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; ادیتوری هستش که من هر روز برای خوندن کدهای پروژه‌های که مشغول کار روشون نیستم و یا ادیت‌های ساده ازش استفاده می‌کنم. به جای نوت‌پد++ میشه از ادیتورهای مثل &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime text&lt;/a&gt; یا حتی Vim استفاده کرد و به نظرم به سلیقه شخصی بر می‌گرده.
اما زمانی که قصد دارید روی پروژه‌های بزرگ کار کنید، ادیتورها نمی‌تونن تمام نیازها رو برطرف کنن، من مدتی با &lt;a href=&#34;http://komodoide.com/komodo-edit/&#34;&gt;Komodo Edit&lt;/a&gt; و مدتی هم با &lt;a href=&#34;http://www.visualstudio.com/&#34;&gt;Visual Studio&lt;/a&gt; کار کردم، با وجود این که ویژوال استودیو یه محیط فوق‌العاده برای کد زدن بود ولی هنوز نمی‌تونست نیازهای من رو برطرف کنه در نتیجه من رفتم سراغ محصولات کمپانی &lt;a href=&#34;http://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt;. محصولات این شرکت از بیس مشترکی برخوردار هستند و شما می‌تونید برای هر زبانی که کار می‌کنید از محصول مخصوص اون زبان برنامه‌نویسی استفاده کنید. من از Webstorm برای کار روی پروژه‌های فرانت‌اند و بک‌اند مبتنی بر جاوا اسکریپت، از PHPStorm برای کار روی پروژه‌های وردپرسی و به صورت کلی پروژه‌هایی که براساس PHP پیاده شدند استفاده می‌کنم. وب‌استورم علاوه بر امکانات یه IDE عادی هماهنگی قابل قبولی با گیت داره، کامندلاین رو به صورت توکار داره و از همه مهم‌تر تسک‌های گرانت رو میشناسه و امکان اجرا کردن اون‌ها رو از طریق خود نرم‌افزار میده.&lt;/p&gt;

&lt;h1 id=&#34;موارد-دیگر:3be659d0e4a0870962ec913cfc3cb2ee&#34;&gt;موارد دیگر&lt;/h1&gt;

&lt;p&gt;اگر بنا بر شمردن ابزارها باشد، می‌توان لیست طویلی از نرم‌افزارها رو آماده کرد، با این وجود من به معرفی موارد فوق اکتفا می‌کنم و در پایان به صورت لیست‌وار برخی ابزارهای دیگری که استفاده می‌کنم رو می‌‌آرم.&lt;/p&gt;

&lt;p&gt;Fiddler2 : سیستم پراکسی ساده که امکان بررسی پکت‌های ارسالی و دریافتی رو میده
XAMPP : مجموع نرم‌افزارهای لازم برای اجرا کد‌های PHP که با وجود این که در حال حاضر نسبت به قبل خیلی کم ازش استفاده می‌کنم، همچنان یکی از محبوب ترین ابزارهای منه
1Password : پسورد منیجر ساده‌ای که به من کمک می‌کنه تمام پسوردهام رو یکسان نذارم&lt;/p&gt;

&lt;p&gt;امیدوارم این مطلب براتون مفید بوده باشه.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>