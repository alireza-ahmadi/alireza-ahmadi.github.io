<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>بلاگ علیرضا احمدی</title>
    <link>https://alireza.es/topics/android/index.xml</link>
    <description>Recent content on بلاگ علیرضا احمدی</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alireza.es/topics/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>روش پیشنهادی من برای یادگیری برنامه‌نویسی اندروید</title>
      <link>https://alireza.es/post/learn-android-programming/</link>
      <pubDate>Mon, 01 Sep 2014 14:32:00 +0430</pubDate>
      
      <guid>https://alireza.es/post/learn-android-programming/</guid>
      <description>&lt;div class=&#34;deprecated&#34;&gt;
	&lt;h6&gt;گذرزمان ...&lt;/h6&gt;
	&lt;p&gt;با توجه به گذشتن مدت زمان نسبتا زیادی از نگارش این مطلب، علی‌رغم مفید بودن بخش قابل توجهی از موارد ذکر شده، در حال حاضر این مطلب به عنوان روش پیشنهادی من برای
یادگیری اندروید توصیه نمی‌شود. پیشنهاد می‌کنم تا پیش از بروزرسانی این مطلب، از منابع جدیدتر مثل &lt;a href=&#34;http://dostibacode.ir/android&#34;&gt;ویدئوی کمپین دوستی با کد&lt;/a&gt;
یا &lt;a href=&#34;https://cloudrail.com/best-resources-to-learn-android-programming/&#34;&gt;این مطلب&lt;/a&gt; که به زبان انگلیسی نوشته شده استفاده کنید.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;جدی‌ترین معضل من در اوایل ورود به حوزه برنامه‌نویسی و طراحی‌ نرم‌افزار پیدا کردن منابع مناسب برای یادگیری یک تکنولوژی یا زبان جدید بود به طوری که برای یادگیری هر چیزی، ساعت‌های زیادی رو صرف جستجو در اینترنت می‌کردم تا بتونم منبع مناسبی رو برای یادگیری اون تکنولوژی پیدا کنم. این روش به من کمک می‌کرد که تا علاوه بر یادگیری اون مبحث خاص بتونم بر خیلی از موارد مرتبط هم اشراف کلی پیدا کنم و در آینده اون ها رو به کار بگیرم اما این روش یادگیری مشکلات خاص خودش رو هم داره. در واقع من برای یادگیری سطحی مجموعه‌ای از مباحث که شاید ارتباط چندانی هم با مبحث مورد نظرم شما نداشتن و بعضا هیچ‌وقت به کارم نیامدند، سه تا چهار برابر زمان لازم برای یادگیری مبحث اصلی رو اختصاص می‌دادم.&lt;/p&gt;

&lt;p&gt;شاید این روش برای من که اون زمان دانش‌آموز بودم و مهم‌ترین مشغولیت ذهنیم خوندن درس‌های مدرسه بود مفید بوده باشه اما برای فردی که دانشجو شده یا بعد از فارغ‌التحصیل شدن از دانشگاه قصد داره با یادگیری یک تکنولوژی خاص موقعیت شغلی مناسبی رو برای خودش فراهم کنه قطعا مثل سم می‌مونه، چون فشار حاصل از کند شدن پروسه یادگیری می‌تونه اون فرد رو به طور کامل از یادگیری اون مبحث منصرف کنه. پس بهتره برای یادگیری هر چیزی بهترین منابع رو انتخاب کنید. در حقیقت همون‌طوری که &lt;a href=&#34;http://blog.alireza.es/5/my-web-development-environment/&#34;&gt;ابزارهای مناسب&lt;/a&gt; به شما کمک می‌کنه که کارتون رو با سرعت و کیفیت بهتری انجام بدید، استفاده از منابع و روش مناسب هم می‌تونه زمان یادگیری شما رو به حداقل برسونه.&lt;/p&gt;

&lt;p&gt;چند روز پیش که مشغول &lt;a href=&#34;https://twitter.com/alireza94&#34;&gt;توییت کردن&lt;/a&gt; در مورد مباحث کاریم بودم، یکی از دوستان دایرکت داد و درخواست کرد که بهش منابعی رو برای یادگیری برنامه‌نویسی اندروید معرفی کنم. منم تصمیم گرفتم منابعی رو که طی چند ماه گذشته به کارآموزهای &lt;a href=&#34;http://www.gandom.co&#34;&gt;گندم&lt;/a&gt; معرفی کرده بودم رو به صورت یک پست بنویسم و به صورت عمومی منتشر کنم. امیدوارم در صورتی که قصد شروع برنامه‌نویسی اندروید رو دارید این مطلب بهتون کمک بکنه.&lt;/p&gt;

&lt;p&gt;از نظر من روشی که در ادامه توضیح میدم یکی از عملی‌ترین و در عین حال ساده‌ترین راهکاری یادگیری برنامه‌نویسی اندروید هستش.&lt;/p&gt;

&lt;p&gt;برای شروع برنامه‌نویسی اندروید شما باید با ساختار و تکنیک‌های اولیه برنامه‌نویسی جاوا آشنا باشید. در صورتی که با جاوا آشنایی ندارید، می‌تونید سری مطالب فوق‌العاده &lt;a href=&#34;http://code.tutsplus.com/series/learn-java-for-android-development--mobile-22888&#34;&gt;یادگیری جاوا برای توسعه اندروید&lt;/a&gt; رو مطالعه کنید. تو این مجموعه مطالب که حدود 13 قسمت میشه با فرض آشنایی کلی شما با اصول برنامه‌نویسی سعی شده تا از مباحث اولیه جاوا تا مباحث نسبتا پیشرفته معرفی بشه. جدا پیشنهاد می‌کنم که اگه برنامه‌نویسی جاوا رو به صورت حرفه‌ای بلد نیستید در خوندن این مطالب تعلل نکنید.
بعد از یادگیری اولیه جاوا، باید سراغ مطلب &lt;a href=&#34;http://raghavendra-androidapps.blogspot.com/2011/07/basic-concepts-of-android.html&#34;&gt;مفاهیم پایه‌ای اندروید&lt;/a&gt; برید. این مطلب توی چند پارگراف به شما اصطلاحات کلی اندروید رو معرفی می‌کنه. اگه حوصله‌اش رو دارید، &lt;a href=&#34;http://developer.android.com/guide/components/fundamentals.html&#34;&gt;مستندات اندروید&lt;/a&gt; هم توضیحات خیلی کاملی برای معرفی مفاهیم واصطلاحات اندروید داده.&lt;/p&gt;

&lt;p&gt;خب تا اینجا صرفا مجموعه‌ای از مطالب تئوری رو خوندید، حالا وقت اینه که یه مقدار وارد فاز عملیاتی بشید، پس برید به این &lt;a href=&#34;http://androidcode.ir/post/install-package-android-SDK-platform&#34;&gt;آموزشی فارسی&lt;/a&gt; و یا این &lt;a href=&#34;http://www.androidcentral.com/installing-android-sdk-windows-mac-and-linux-tutorial&#34;&gt;آموزش انگلیسی&lt;/a&gt; و اندروید SDK رو نصب کنید. اندروید SDK در واقع مجموعه ابزارهای گوگل برای توسعه نرم‌افزاری های اندرویدی است که شامل منابع آموزشی، مستندات، کتابخانه‌های نرم‌افزاری، ابزارهای عیب‌یابی و انتشار نرم‌افزار میشه. علاوه بر این موارد اندروید SDK به شما یک ماشین مجازی برای اجرا کدهای اندرویدتون میده که به علل مختلف پیشنهاد می‌کنم ازش استفاده نکنید و در ادامه بهتون راهکارهای جایگزینش رو معرفی خواهم کرد(تا قبل از رسیدن به اون بخش می‌تونید اپ‌های نمونه‌ای که می‌نویسید رو توی گوشیتون اجرا کنید). در واقع اندروید SDK پیش‌نیاز شما برای برنامه‌نویسی و تولید نرم‌افزارهای اندرویدیه.&lt;/p&gt;

&lt;p&gt;حالا پیش‌نیازهای شروع برنامه‌نویسی اندروید رو در اختیار دارید پس باید شروع کنید به یادگیری عملی اندروید. پیشنهاد من برای این مرحله دیدن &lt;a href=&#34;http://www.lynda.com/Android-tutorials/Android-SDK-Essential-Training/143102-2.html&#34;&gt;ویدئوهای آموزشی لیندا&lt;/a&gt; است که می‌تونید اون ها رو از سایت تولید کننده بخرید و یا اگه نمی‌تونید و یا نمی‌خواین که بخرید با یه جستجوی ساده توی وب‌سایت‌های فارسی پیدا و دانلودش کنید. این سری ویدئو از مفاهیم اولیه برنامه‌نویسی اندروید مثل نصب اندروید SDK شروع می‌کنه و به تدریج حجم زیادی از تکنیک‌های کلیدی مثل ایجاد کردن چند صفحه در اپ، کار کردن با دیتا،پیاده‌سازی المان‌های رابط کاربری و &amp;hellip; رو آموزش میده. اکیدا توصیه می‌کنم که به دیدن ویدئوها اکتفا نکنید و سعی‌ کنید تمام کدهای زده شده توی ویدئوها رو یکبار خودتون بزنید.&lt;/p&gt;

&lt;p&gt;بعد از این دیدن این سری ویدئوها شما می‌تونید یک اپ ساده شبیه اکثر اپ‌های موجود در بازار اندروید رو تولید کنید. پیشنهاد می‌کنم در این مرحله و قبل از ورود به مرحله بعدی اپی بنویسید که توش از تمام مواردی که یاد گرفتید و یا حداقل خوندید ولی یاد نگرفتید استفاده کنید(شاید نوشتن یک ماشین حساب ساده ایده خوبی باشه) تا به طور کامل به اون مباحث مسلط بشید(و البته پیشنهاد می‌کنم که توی بازار منتشرش نکنید :)).&lt;/p&gt;

&lt;p&gt;در صورتی که مواردی که تا اینجا ذکر شده رو انجام داده باشید آمادگی این رو دارید که  تکنیک‌های مربوط به برنامه‌نویسی نیمه‌ پیشرفته اندروید رو یاد بگیرید. در مرحله اول این بخش پیشنهاد می‌کنم که ماشین مجازی GenyMotion رو نصب کنید. ماشین‌ مجازی پیش‌فرض اندروید هنوز و حتی بعد بهبود از قابل توجه سرعت نسبت به نسخه‌های قدیمی، سرعت پایینی داره، به طوری که اکثر برنامه‌نویس‌ها ترجیح میدن تا از دیوایس‌هاشون برای تست نرم‌افزارها استفاده کنن(البته تست کردن روی دیوایس مزایای خاص خودش رو داره). اما از طرفی به علت کثرت دیوایس‌های اندرویدی شما نمی‌تونید به یک یا دو دیوایسی که در خونه یا محل کار دارید اکتفا کنید و مجبورید برای تست دیوایس‌های مختلف و ورژن‌های مختلف اندروید از سیستم‌های شبیه‌ساز و ماشین‌های مجازی استفاده کنید. جنی‌موشن با سرعت فوق‌العاده بالایی که داره بهتون کمک می‌کنه که کارایی شبیه‌ساز اندروید(AVD) رو در کنار سرعت بالا داشته باشید.&lt;/p&gt;

&lt;p&gt;در مرحله دوم سعی کنید روی یکی از کاربردی‌ترین مباحث موجود در ویدئوها تمرکز کنید، یعنی SQLite. این پایگاه داده به علت سبک بودن در حجم زیادی از سیستم‌های‌عامل و نرم‌افزارها مورد استفاده قرار می‌گیره و با توجه به اهمیت کارکردن با دیتاها، بهتره شما به طور کامل به اون مسلط باشید. مطلب &lt;a href=&#34;http://www.askyb.com/sqlite/learn-sqlite-in-1-hour/&#34;&gt;آموزش Sqlite در یک ساعت&lt;/a&gt; خیلی می‌تونه بهتون کمک کنه و اگه حوصله داشته باشید این &lt;a href=&#34;http://sql.learncodethehardway.org/book/&#34;&gt;کتاب مجانی&lt;/a&gt; هم خیلی بهتون کمک خواهد کرد.&lt;/p&gt;

&lt;p&gt;توی مرحله سوم سعی کنید بر روی مدیریت ارورها کار کنید، اکثر کاربرا نرم‌افزاری که توی اولین اجرا فورس کلوز بشه رو دوباره نصب نمی‌کنن پس باید اپتون تو تمام شرایط به کار خودش ادامه بده. این &lt;a href=&#34;http://trivedihardik.wordpress.com/2011/08/20/how-to-avoid-force-close-error-in-android/&#34;&gt;مطلب&lt;/a&gt; می‌تونه به شما توی این بخش کمک کنه، همچنین در صورتی که سرویس گوگل آنالایتیکز رو بر روی اپتون راه‌ندازی کنید می‌تونید به اطلاعات مناسبی از نحوه تعامل کاربرها با اپتون، زمان و نحوه کرش‌کردن‌های اپ و خیلی از اطلاعات جالب دیگه دست پیدا کنید و ارورهای احتمالی رو در کوتاه‌ترین زمان رفع کنید. &lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/android/v4/&#34;&gt;راهنمای گوگل&lt;/a&gt; بهترین راهنما برای اضافه کردن گوگل آنلایتیکز به اپتون هستش.&lt;/p&gt;

&lt;p&gt;مرحله چهارم شروع کار با سرویس‌های پس‌زمینه(Background services) است. بک‌گراند سرویسز یکی از پر کاربرد ترین موارد در سیستم‌های نسبتا پیشرفته هستن، پس خوندن &lt;a href=&#34;http://danielnadeau.blogspot.com/2013/10/android-services-tutorial-run-tasks-in.html&#34;&gt;این مطلب&lt;/a&gt; و &lt;a href=&#34;http://cogitolearning.co.uk/?p=780&#34;&gt;این مقایسه&lt;/a&gt; رو از دست ندید.
در محله پایانی که از نظر من مهم‌ترین مرحله است، شما باید سعی کنید تا از طریق اپتون با سرویس‌های تحت وب ارتباط برقرار کنید. پیش‌نیاز این مسئله شناخت پروتکل‌های ارتباطی وب‌ هستش پس مطلب شماره &lt;a href=&#34;http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177&#34;&gt;یک&lt;/a&gt; و &lt;a href=&#34;http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-2--net-31155&#34;&gt;دو&lt;/a&gt; رو از سری مطالب آموزش پروتکل HTTP بخونید. حالا که با استانداردها و قواعد آشنا شدید می‌تونید برید سراغ استفاده از کتابخانه‌ها و امکاناات اندروید برای ارتباط با وب. در مطلب &lt;a href=&#34;http://www.raywenderlich.com/56107/make-first-android-app-part-1&#34;&gt;آموزش پیاده‌سازی برنامه آب و هوا&lt;/a&gt; سعی شده تا یک برنامه ساده که با وب ارتباط برقرار می‌کنه طراحی بشه. در &lt;a href=&#34;http://hmkcode.com/android-parsing-json-data/&#34;&gt;این مطلب&lt;/a&gt;  هم سعی شده تا کار با وب‌سرویس‌هایی که جواب رو به صورت JSON برمی‌گردونن آموزش داده بشه. بعد از این مرحله می‌تونید پا رو یک قدم جلوتر بذارید و برید سراغ این که وب‌سرویس رو هم خودتون طراحی کنید. &lt;a href=&#34;http://www.androidhive.info/2014/01/how-to-create-rest-api-for-android-app-using-php-slim-and-mysql-day-23/&#34;&gt;این مطلب&lt;/a&gt; یک نمونه خوب از این پروسه است(البته پیشنهاد من اینه که طراحی وب‌سرویس رو به افرادی که در حوزه وب تخصص دارن واگذار کنید). مرحله بعدی می‌تونه دیدن این &lt;a href=&#34;https://developers.google.com/events/io/2012/sessions/gooio2012/121/&#34;&gt;ویدئو گوگل IO&lt;/a&gt; باشه که خیلی از موارد ارتباط با وب سرویس ها رو پوشش داده. در نهایت می‌تونید بر روی سینک کردن اطلاعات وب‌سرور و اپتون کار کنید، &lt;a href=&#34;http://chariotsolutions.com/blog/post/android-data-sync/&#34;&gt;این مطلب&lt;/a&gt; و &lt;a href=&#34;http://udinic.wordpress.com/2013/07/24/write-your-own-android-sync-adapter/&#34;&gt;این مطلب&lt;/a&gt; نمونه‌های خوبی از این مورد هستند.&lt;/p&gt;

&lt;p&gt;در این مطلب من سعی کردم کلیات مواردی که بیشترین کاربرد در اندروید رو دارن معرفی کنم، یقینا در صورتی که به صورت جدی وارد حوزه برنامه اندروید شوید به حجم اطلاعاتی خیلی بیشتری از موارد بالا نیاز پیدا خواهید کرد با این وجود امیدوارم تونسته باشم به شما کمکی بکنم و به عنوان آخرین پیشنهاد، برای این که یاد بگیرید، سعی کنید پیچیده‌ترین پروژه‌هایی که به ذهنتون می‌رسه رو انجام بدید و در پروسه انجام پروژه تکنیک‌های حرفه‌ای رو راه بگیرید که بهترین روش برای یادگیریه.
در نهایت اگه حال و حوصله خوندن این موارد رو ندارید و به قول معروف دیر اومدید و زود هم می‌خواین برین می‌تونید شماره &lt;a href=&#34;http://imohamad.me/blog/1393/06/05/building-a-simple-application-for-android-part1/&#34;&gt;یک&lt;/a&gt; و &lt;a href=&#34;http://imohamad.me/blog/1393/06/08/building-a-simple-application-for-android-part2/&#34;&gt;دو&lt;/a&gt; آموزش ساده و کاربردیه برنامه‌نویسی اندرویدی که محمدرضا دیلمی نوشته رو بخونید، به مراتب نگارش بهتری از من داره.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>